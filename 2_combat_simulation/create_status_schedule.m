function [schedule] = create_status_schedule(weapon, crit_schedule)
%{
This function takes a schedule that looks like: 

firing time, round #, magazine #, multishot #, damage phase #, crit tier,
(first SE)
...

and adds status effect columns to the schedule.


firing time, round #, magazine #, multishot #, damage phase #, crit tier,
SE1, SE2, SE3, ...

Number of SEs depends on if the status effect goes over 100%. If so then
there will be one guaranteed status effect and another rolled effect. 

0 no status proc
1 impact
2 puncture
3 slash
4 cold
5 electricity
6 heat
7 toxin
8 blast
9 corrosive
10 gas
11 magnetic
12 radiation
13 viral

%}

schedule = [];

% get all three phases of weapon damages

damage_breakdown1 = ...
    [weapon.IMPACT ...
    weapon.PUNCTURE ...
    weapon.SLASH ...
    weapon.COLD ...
    weapon.ELECTRICITY ...
    weapon.HEAT ...
    weapon.TOXIN ...
    weapon.BLAST ...
    weapon.CORROSIVE ...
    weapon.GAS ...
    weapon.MAGNETIC ...
    weapon.RADIATION ...
    weapon.VIRAL];

damage_breakdown2 = ...
    [weapon.IMPACT2 ...
    weapon.PUNCTURE2 ...
    weapon.SLASH2 ...
    weapon.COLD2 ...
    weapon.ELECTRICITY2 ...
    weapon.HEAT2 ...
    weapon.TOXIN2 ...
    weapon.BLAST2 ...
    weapon.CORROSIVE2 ...
    weapon.GAS2 ...
    weapon.MAGNETIC2 ...
    weapon.RADIATION2 ...
    weapon.VIRAL2];

damage_breakdown3 = ...
    [weapon.IMPACT3 ...
    weapon.PUNCTURE3 ...
    weapon.SLASH3 ...
    weapon.COLD3 ...
    weapon.ELECTRICITY3 ...
    weapon.HEAT3 ...
    weapon.TOXIN3 ...
    weapon.BLAST3 ...
    weapon.CORROSIVE3 ...
    weapon.GAS3 ...
    weapon.MAGNETIC3 ...
    weapon.RADIATION3 ...
    weapon.VIRAL3];


for i = 1:size(crit_schedule,1) % iterate through every row
    this_damage_instance = crit_schedule(i,:); % get this row of damage instance
    
    % get correct information from weapon
    switch this_damage_instance(5)
        case 1
            damage_breakdown = damage_breakdown1;
        case 2
            damage_breakdown = damage_breakdown2;
        case 3
            damage_breakdown = damage_breakdown3;
    end
    
    % initialize status chance
    SC = weapon.SC;
    
    % determine if status chance is over 100%
    if weapon.SC > 1 % if so
        % get the number of guaranteed status effects
        num_guaranteed_rolls = floor(weapon.SC);
        % define SC as the probability of the last roll
        SC = weapon.SC-num_guaranteed_rolls;
        % roll all of the guaranteed rolls
        for j = 1:num_guaranteed_rolls
            % construct guaranteed roll random variable
            status_guaranteed.x = 1:13;
            status_guaranteed.p = damage_breakdown/sum(damage_breakdown);
            % roll random variable
            status_guaranteed_outcome = rollRandVariable(status_guaranteed);
            % concatenate status effect field to this_damage_instance
            this_damage_instance = [this_damage_instance status_guaranteed_outcome];
        end
    end
    
    % roll the last undetermined status roll
    status.x = 0:13;
    status.p = [1-SC SC*damage_breakdown/sum(damage_breakdown)];   
    status_outcome = rollRandVariable(status);
    % concatenate status effect field to this_damage_instance
    this_damage_instance = [this_damage_instance status_outcome];
        
    % put them in the final schedule
    schedule = [schedule; this_damage_instance];
end

end
